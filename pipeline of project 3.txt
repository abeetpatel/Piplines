pipeline {
    agent any
 
    environment {
        DB_USER = 'root'
        DB_PASS = 'root'
	JAVA_HOME = "C:\\Program Files\\Java\\jdk-11.0.15.1"
        TOMCAT_HOME = 'D:\\Download\\apache-tomcat-9.0.97-windows-x64\\apache-tomcat-9.0.97'
        TOMCAT_WEBAPPS_PATH = "${TOMCAT_HOME}\\webapps"
        TOMCAT_SERVICE_NAME = 'Tomcat9'
        MAVEN_HOME = "C:\\ProgramData\\Jenkins\\.jenkins\\tools\\hudson.tasks.Maven_MavenInstallation\\Maven"
    }
 
    stages {
        stage('Cleanup Workspace') {
            steps {
                deleteDir()
            }
        }
 
        stage('Clone Repository') {
            steps {
                git credentialsId: 'github-credentials', url: 'https://github.com/abeetpatel/P-3.git', branch: 'main'
            }
        }
 
        // âœ… New stage to inject DB credentials into XML
        stage('Inject DB Credentials') {
            steps {
                script {
                    def cfgFile = 'project_3\\src\\main\\resources\\hibernate.cfg.xml'
                    bat """
                    powershell -Command "(Get-Content '${cfgFile}') -replace '<property name=\\"hibernate.connection.username\\">.*?</property>', '<property name=\\"hibernate.connection.username\\">${DB_USER}</property>' | Set-Content '${cfgFile}'"
                    powershell -Command "(Get-Content '${cfgFile}') -replace '<property name=\\"hibernate.connection.password\\">.*?</property>', '<property name=\\"hibernate.connection.password\\">${DB_PASS}</property>' | Set-Content '${cfgFile}'"
                    """
                }
            }
        }
 
        stage('Build WAR File') {
            steps {
                bat "\"%MAVEN_HOME%\\bin\\mvn\" clean package -DskipTests -Dmaven.repo.local=.m2/repository -f project_3/pom.xml"
            }
        }
 
        stage('Copy WAR to Tomcat') {
            steps {
                script {
                    def warFile = "project_3\\target\\project_3.war"
                    def destination = "${TOMCAT_WEBAPPS_PATH}\\project_3.war"
                    bat "copy /Y \"${warFile}\" \"${destination}\""
                }
            }
        }
 
        stage('Verify WAR Copy') {
            steps {
                script {
                    def warExists = fileExists("${TOMCAT_WEBAPPS_PATH}\\project_3.war")
                    if (warExists) {
                        echo "WAR file copied successfully."
                    } else {
                        error("WAR file not found in Tomcat webapps directory.")
                    }
                }
            }
        }
 
        stage('Ensure Tomcat Service Exists') {
            steps {
                script {
                    def serviceExists = bat(script: "sc query ${TOMCAT_SERVICE_NAME}", returnStatus: true) == 0
                    if (!serviceExists) {
                        echo "Tomcat service not found. Installing..."
                        bat "cd /d ${TOMCAT_HOME}\\bin && service.bat install"
                    } else {
                        echo "Tomcat service already installed."
                    }
                }
            }
        }
 
        stage('Restart Tomcat') {
            steps {
                script {
                    def tomcatRunning = bat(script: "sc query ${TOMCAT_SERVICE_NAME} | findstr RUNNING", returnStatus: true) == 0
                    if (tomcatRunning) {
                        echo "Stopping Tomcat..."
                        bat "sc stop ${TOMCAT_SERVICE_NAME}"
                        sleep time: 10, unit: 'SECONDS'
                    } else {
                        echo "Tomcat is not running. Starting..."
                    }
                    echo "Starting Tomcat Service..."
                    bat "sc start ${TOMCAT_SERVICE_NAME}"
                    sleep time: 15, unit: 'SECONDS'
                }
            }
        }
 
        stage('Verify Deployment') {
            steps {
                script {
                    bat "powershell -Command \"try {Invoke-WebRequest -Uri 'http://localhost:8080/project_3' -UseBasicParsing} catch {Write-Host 'Tomcat is not reachable'}\""
                }
            }
        }
    }
 
    post {
        always {
            echo 'Cleaning workspace...'
            deleteDir()
        }
    }
}